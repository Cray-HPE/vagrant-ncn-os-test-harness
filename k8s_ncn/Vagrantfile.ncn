REQUIRED_PLUGINS = %w(vagrant-libvirt vagrant-env)
exit unless REQUIRED_PLUGINS.all? do |plugin|
  Vagrant.has_plugin?(plugin) || (
    puts "The #{plugin} plugin is required. Please install it with:"
    puts "$ vagrant plugin install #{plugin}"
    false
  )
end
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'

Vagrant.configure("2") do |config|
    config.env.enable
    config.ssh.username = ENV['VAGRANT_NCN_USER']
    config.ssh.password = ENV['VAGRANT_NCN_PASSWORD']
    config.vm.synced_folder ".", "/vagrant", type: "nfs", nfs_udp: false, nfs_version: 4
    config.vm.box = "k8s_ncn"
    config.vm.boot_timeout = 600
    config.vm.hostname = "vncn-w011-01"

    # Passthrough the sr-iov virtual functions for mgmt0 and mgmt1
    config.vm.network :public_network,
	auto_config: false,
	dev: "#{ENV['SRIOV_mgmt0']}",
	type: "direct",
	mode: "passthrough",
	trust_guest_rx_filters: "yes"
    config.vm.network :public_network,
	auto_config: false,
	dev: "#{ENV['SRIOV_mgmt1']}",
	type: "direct",
	mode: "passthrough",
	trust_guest_rx_filters: "yes"
    
    config.vm.provider :libvirt do |ncn|
        ncn.default_prefix = "csm-"

        # Will need to persist the sr-iov functions after a reboot
        ncn.autostart = false

        # Speeds up the boot a little by specifying exactly how to boot.
        ncn.boot 'hd'
        ncn.disk_device = "vda"
        ncn.disk_bus = "virtio"

        # Enables vnc console access at the LIBVIRT_HOST_IP.
        ncn.graphics_type = "vnc"
        ncn.graphics_ip = "0.0.0.0"
        ncn.graphics_port = "5900"

        # TODO: Make something a little smarter here for CPU core request.
        ncn.cpus = ENV['K8s_NCN_CPUS']
        ncn.memory = ENV['K8s_NCN_MEMORY']

        # Enable KVM nested virtualization.
        ncn.nested = true
        # ncn.cpu_mode = "host-passthrough"

        # Maximizes compatibility for Intel-based machines.
        ncn.machine_type = 'q35'

        # Helps libvirt detect that the machine got an IP.
	ncn.management_network_mac = "525400123456"

    end

    # Populate artifactory creds so zypper can reach algol.
    config.vm.provision "shell", inline: <<-EOS
if [[ ! $(cat /etc/environment | grep "ARTIFACTORY_USER" ) || ! $(cat /etc/environment | grep "ARTIFACTORY_TOKEN") ]]; then
  cat <<-EOF > /etc/environment
ARTIFACTORY_USER=#{ENV['ARTIFACTORY_USER']}
ARTIFACTORY_TOKEN=#{ENV['ARTIFACTORY_TOKEN']}
EOF
fi
EOS
    config.vm.provision "shell", inline: <<-EOS
echo "Setting up CA certs and zypper repos."
echo "Creating a temporary craysys just wrapping curl."
mv /bin/craysys /bin/craysys.bak
cat <<-EOF > /usr/local/bin/craysys
#!/bin/bash
curl -s api-gw-service.local:8888/meta-data?Global | jq '.Global["ca-certs"]'
EOF
chmod +x /usr/local/bin/craysys
/srv/cray/scripts/common/update_ca_certs.py
zypper -n ar /vagrant/sandbox/host.repos || true
zypper -n refresh
EOS

end
